{"id":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","dependencies":[{"name":"D:\\Onedrive\\Block\\3_Hakathon\\DrugPrescriiption\\package.json","includedInParent":true,"mtime":1604283705355},{"name":"D:\\Onedrive\\Block\\3_Hakathon\\DrugPrescriiption\\node_modules\\ipfs-core-utils\\package.json","includedInParent":true,"mtime":1603876922165},{"name":"err-code","loc":{"line":3,"column":24},"parent":"D:\\Onedrive\\Block\\3_Hakathon\\DrugPrescriiption\\node_modules\\ipfs-core-utils\\src\\pins\\normalise-input.js","resolved":"D:\\Onedrive\\Block\\3_Hakathon\\DrugPrescriiption\\node_modules\\err-code\\index.js"},{"name":"cids","loc":{"line":4,"column":20},"parent":"D:\\Onedrive\\Block\\3_Hakathon\\DrugPrescriiption\\node_modules\\ipfs-core-utils\\src\\pins\\normalise-input.js","resolved":"D:\\Onedrive\\Block\\3_Hakathon\\DrugPrescriiption\\node_modules\\ipfs-core-utils\\node_modules\\cids\\src\\index.js"}],"generated":{"js":"'use strict'\n\nconst errCode = require('err-code')\nconst CID = require('cids')\n\n/*\n * Transform one of:\n *\n * ```\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```\n * AsyncIterable<{ path: CID|String, recursive, metadata }>\n * ```\n *\n * @param input Object\n * @return AsyncIterable<{ path: CID|String, recursive, metadata }>\n */\nmodule.exports = function normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`, 'ERR_UNEXPECTED_INPUT'))\n  }\n\n  // CID|String\n  if (CID.isCID(input) || input instanceof String || typeof input === 'string') {\n    return (async function * () { // eslint-disable-line require-await\n      yield toPin({ cid: input })\n    })()\n  }\n\n  // { cid: CID recursive, metadata }\n  if (input.cid != null || input.path != null) {\n    return (async function * () { // eslint-disable-line require-await\n      yield toPin(input)\n    })()\n  }\n\n  // Iterable<?>\n  if (input[Symbol.iterator]) {\n    return (async function * () { // eslint-disable-line require-await\n      const iterator = input[Symbol.iterator]()\n      const first = iterator.next()\n      if (first.done) return iterator\n\n      // Iterable<CID|String>\n      if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n        yield toPin({ cid: first.value })\n        for (const cid of iterator) {\n          yield toPin({ cid })\n        }\n        return\n      }\n\n      // Iterable<{ cid: CID recursive, metadata }>\n      if (first.value.cid != null || first.value.path != null) {\n        yield toPin(first.value)\n        for (const obj of iterator) {\n          yield toPin(obj)\n        }\n        return\n      }\n\n      throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n    })()\n  }\n\n  // AsyncIterable<?>\n  if (input[Symbol.asyncIterator]) {\n    return (async function * () {\n      const iterator = input[Symbol.asyncIterator]()\n      const first = await iterator.next()\n      if (first.done) return iterator\n\n      // AsyncIterable<CID|String>\n      if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n        yield toPin({ cid: first.value })\n        for await (const cid of iterator) {\n          yield toPin({ cid })\n        }\n        return\n      }\n\n      // AsyncIterable<{ cid: CID|String recursive, metadata }>\n      if (first.value.cid != null || first.value.path != null) {\n        yield toPin(first.value)\n        for await (const obj of iterator) {\n          yield toPin(obj)\n        }\n        return\n      }\n\n      throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n    })()\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\nfunction toPin (input) {\n  const pin = {\n    path: input.cid || input.path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/pins/normalise-input.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}}],"sources":{"../node_modules/ipfs-core-utils/src/pins/normalise-input.js":"'use strict'\n\nconst errCode = require('err-code')\nconst CID = require('cids')\n\n/*\n * Transform one of:\n *\n * ```\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```\n * AsyncIterable<{ path: CID|String, recursive, metadata }>\n * ```\n *\n * @param input Object\n * @return AsyncIterable<{ path: CID|String, recursive, metadata }>\n */\nmodule.exports = function normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`, 'ERR_UNEXPECTED_INPUT'))\n  }\n\n  // CID|String\n  if (CID.isCID(input) || input instanceof String || typeof input === 'string') {\n    return (async function * () { // eslint-disable-line require-await\n      yield toPin({ cid: input })\n    })()\n  }\n\n  // { cid: CID recursive, metadata }\n  if (input.cid != null || input.path != null) {\n    return (async function * () { // eslint-disable-line require-await\n      yield toPin(input)\n    })()\n  }\n\n  // Iterable<?>\n  if (input[Symbol.iterator]) {\n    return (async function * () { // eslint-disable-line require-await\n      const iterator = input[Symbol.iterator]()\n      const first = iterator.next()\n      if (first.done) return iterator\n\n      // Iterable<CID|String>\n      if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n        yield toPin({ cid: first.value })\n        for (const cid of iterator) {\n          yield toPin({ cid })\n        }\n        return\n      }\n\n      // Iterable<{ cid: CID recursive, metadata }>\n      if (first.value.cid != null || first.value.path != null) {\n        yield toPin(first.value)\n        for (const obj of iterator) {\n          yield toPin(obj)\n        }\n        return\n      }\n\n      throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n    })()\n  }\n\n  // AsyncIterable<?>\n  if (input[Symbol.asyncIterator]) {\n    return (async function * () {\n      const iterator = input[Symbol.asyncIterator]()\n      const first = await iterator.next()\n      if (first.done) return iterator\n\n      // AsyncIterable<CID|String>\n      if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n        yield toPin({ cid: first.value })\n        for await (const cid of iterator) {\n          yield toPin({ cid })\n        }\n        return\n      }\n\n      // AsyncIterable<{ cid: CID|String recursive, metadata }>\n      if (first.value.cid != null || first.value.path != null) {\n        yield toPin(first.value)\n        for await (const obj of iterator) {\n          yield toPin(obj)\n        }\n        return\n      }\n\n      throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n    })()\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\nfunction toPin (input) {\n  const pin = {\n    path: input.cid || input.path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n"},"lineCount":125}},"error":null,"hash":"2195b3b9b333c170ffa04b6da84bc382","cacheData":{"env":{}}}