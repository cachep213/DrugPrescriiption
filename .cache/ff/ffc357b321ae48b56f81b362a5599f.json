{"id":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","dependencies":[{"name":"D:\\Onedrive\\Block\\3_Hakathon\\DrugPrescriiption\\package.json","includedInParent":true,"mtime":1604283705355},{"name":"D:\\Onedrive\\Block\\3_Hakathon\\DrugPrescriiption\\node_modules\\ipfs-core-utils\\package.json","includedInParent":true,"mtime":1603876922165},{"name":"./normalise-content.browser","loc":{"line":3,"column":33},"parent":"D:\\Onedrive\\Block\\3_Hakathon\\DrugPrescriiption\\node_modules\\ipfs-core-utils\\src\\files\\normalise-input\\index.browser.js","resolved":"D:\\Onedrive\\Block\\3_Hakathon\\DrugPrescriiption\\node_modules\\ipfs-core-utils\\src\\files\\normalise-input\\normalise-content.browser.js"},{"name":"./normalise-input","loc":{"line":4,"column":31},"parent":"D:\\Onedrive\\Block\\3_Hakathon\\DrugPrescriiption\\node_modules\\ipfs-core-utils\\src\\files\\normalise-input\\index.browser.js","resolved":"D:\\Onedrive\\Block\\3_Hakathon\\DrugPrescriiption\\node_modules\\ipfs-core-utils\\src\\files\\normalise-input\\normalise-input.js"}],"generated":{"js":"'use strict'\n\nconst normaliseContent = require('./normalise-content.browser')\nconst normaliseInput = require('./normalise-input')\n\n/*\n * Transforms any of the `ipfs.add` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: Blob }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param input Object\n * @return AsyncInterable<{ path, mode, mtime, content: Blob }>\n */\nmodule.exports = (input) => normaliseInput(input, normaliseContent)\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}}],"sources":{"../node_modules/ipfs-core-utils/src/files/normalise-input/index.browser.js":"'use strict'\n\nconst normaliseContent = require('./normalise-content.browser')\nconst normaliseInput = require('./normalise-input')\n\n/*\n * Transforms any of the `ipfs.add` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: Blob }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param input Object\n * @return AsyncInterable<{ path, mode, mtime, content: Blob }>\n */\nmodule.exports = (input) => normaliseInput(input, normaliseContent)\n"},"lineCount":19}},"error":null,"hash":"86a12270bc124ee25881ccacf39c7688","cacheData":{"env":{}}}